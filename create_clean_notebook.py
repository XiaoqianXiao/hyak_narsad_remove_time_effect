#!/usr/bin/env python3
"""
Create a clean and organized NARSAD trial tracking analysis notebook
"""

import json

# Define the notebook structure
notebook = {
    "cells": [
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "# NARSAD Trial Tracking Analysis\n",
                "\n",
                "This notebook **tests the actual functions from `first_level_workflows.py`** to generate contrasts and visualize design matrices using half-events data.\n",
                "\n",
                "## Overview\n",
                "- **Tests actual workflow functions**: Uses `extract_cs_conditions` and `create_contrasts` from `first_level_workflows.py`\n",
                "- **Half-events data**: Uses `task-Narsad_phase2_half_events.csv` and `task-Narsad_phase3_half_events.csv`\n",
                "- **9 Interesting Contrasts**: Tests contrast generation with first_half and second_half conditions\n",
                "- **Chronological visualization**: Shows design matrix with proper trial ordering\n",
                "\n",
                "## What This Notebook Does\n",
                "1. **Imports actual workflow functions** from `first_level_workflows.py`\n",
                "2. **Loads NARSAD half-events data** from both phase2 and phase3\n",
                "3. **Tests the actual functions** with the new data structure\n",
                "4. **Generates contrasts** using the real workflow code\n",
                "5. **Visualizes design matrices** with chronological trial order"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": None,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Import libraries and actual workflow functions\n",
                "import pandas as pd\n",
                "import numpy as np\n",
                "import matplotlib.pyplot as plt\n",
                "import logging\n",
                "import os\n",
                "from matplotlib.gridspec import GridSpec\n",
                "\n",
                "# Import the ACTUAL workflow functions from first_level_workflows.py\n",
                "from first_level_workflows import extract_cs_conditions, create_contrasts\n",
                "\n",
                "# Set up logging\n",
                "logging.basicConfig(level=logging.INFO)\n",
                "logger = logging.getLogger(__name__)\n",
                "\n",
                "print(\"✅ Libraries and ACTUAL workflow functions imported successfully\")\n",
                "print(\"✅ Using real functions from first_level_workflows.py - NOT copies!\")"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## Load NARSAD Half-Events Data\n",
                "\n",
                "Load both phase2 and phase3 half-events data from the behavioral directory."
            ]
        },
        {
            "cell_type": "code",
            "execution_count": None,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Load NARSAD half-events data\n",
                "behav_dir = \"/Users/xiaoqianxiao/projects/NARSAD/MRI/source_data/behav\"\n",
                "phase2_file = os.path.join(behav_dir, \"task-Narsad_phase2_half_events.csv\")\n",
                "phase3_file = os.path.join(behav_dir, \"task-Narsad_phase3_half_events.csv\")\n",
                "\n",
                "# Load phase2 data (tab-separated, but needs manual splitting)\n",
                "df_phase2_raw = pd.read_csv(phase2_file, sep='\\t')\n",
                "df_phase2 = df_phase2_raw.iloc[:, 0].str.split('\\t', expand=True)\n",
                "df_phase2.columns = ['onset', 'duration', 'trial_type']\n",
                "df_phase2['onset'] = df_phase2['onset'].astype(float)\n",
                "df_phase2['duration'] = df_phase2['duration'].astype(float)\n",
                "print(f\"Phase2: {len(df_phase2)} trials, {len(df_phase2['trial_type'].unique())} trial types\")\n",
                "print(f\"Trial types: {sorted(df_phase2['trial_type'].unique())}\")\n",
                "\n",
                "# Load phase3 data (already properly formatted)\n",
                "df_phase3 = pd.read_csv(phase3_file, sep='\\t')\n",
                "print(f\"\\nPhase3: {len(df_phase3)} trials, {len(df_phase3['trial_type'].unique())} trial types\")\n",
                "print(f\"Trial types: {sorted(df_phase3['trial_type'].unique())}\")\n",
                "\n",
                "print(\"\\n✅ Data loaded successfully\")"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## Test Actual Workflow Functions\n",
                "\n",
                "Test the **actual functions** from `first_level_workflows.py` with the half-events data."
            ]
        },
        {
            "cell_type": "code",
            "execution_count": None,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Test Phase2 data with ACTUAL workflow functions\n",
                "print(\"=\" * 80)\n",
                "print(\"TESTING PHASE2 WITH ACTUAL WORKFLOW FUNCTIONS\")\n",
                "print(\"=\" * 80)\n",
                "\n",
                "# Test extract_cs_conditions function from first_level_workflows.py\n",
                "df_phase2_conditions, cs_conditions, css_conditions, csr_conditions, other_conditions = extract_cs_conditions(df_phase2)\n",
                "print(f\"\\n✅ extract_cs_conditions completed for Phase2\")\n",
                "print(f\"CS conditions: {cs_conditions}\")\n",
                "print(f\"CSS conditions: {css_conditions}\")\n",
                "print(f\"CSR conditions: {csr_conditions}\")\n",
                "print(f\"Other conditions: {other_conditions}\")\n",
                "print(f\"Unique conditions: {sorted(df_phase2_conditions['conditions'].unique())}\")\n",
                "\n",
                "# Test create_contrasts function from first_level_workflows.py\n",
                "contrasts_phase2, cs_contrasts, css_contrasts, csr_contrasts, other_contrasts = create_contrasts(df_phase2, contrast_type='interesting')\n",
                "print(f\"\\n✅ create_contrasts completed for Phase2\")\n",
                "print(f\"Generated {len(contrasts_phase2)} contrasts\")\n",
                "print(f\"First 5 contrasts: {[c[0] for c in contrasts_phase2[:5]]}\")"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": None,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Test Phase3 data with ACTUAL workflow functions\n",
                "print(\"=\" * 80)\n",
                "print(\"TESTING PHASE3 WITH ACTUAL WORKFLOW FUNCTIONS\")\n",
                "print(\"=\" * 80)\n",
                "\n",
                "# Test extract_cs_conditions function from first_level_workflows.py\n",
                "df_phase3_conditions, cs_conditions, css_conditions, csr_conditions, other_conditions = extract_cs_conditions(df_phase3)\n",
                "print(f\"\\n✅ extract_cs_conditions completed for Phase3\")\n",
                "print(f\"CS conditions: {cs_conditions}\")\n",
                "print(f\"CSS conditions: {css_conditions}\")\n",
                "print(f\"CSR conditions: {csr_conditions}\")\n",
                "print(f\"Other conditions: {other_conditions}\")\n",
                "print(f\"Unique conditions: {sorted(df_phase3_conditions['conditions'].unique())}\")\n",
                "\n",
                "# Test create_contrasts function from first_level_workflows.py\n",
                "contrasts_phase3, cs_contrasts, css_contrasts, csr_contrasts, other_contrasts = create_contrasts(df_phase3, contrast_type='interesting')\n",
                "print(f\"\\n✅ create_contrasts completed for Phase3\")\n",
                "print(f\"Generated {len(contrasts_phase3)} contrasts\")\n",
                "print(f\"First 5 contrasts: {[c[0] for c in contrasts_phase3[:5]]}\")"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## Phase2 Design Matrix Visualization\n",
                "\n",
                "Visualize the design matrix for Phase2 data with chronological trial ordering."
            ]
        },
        {
            "cell_type": "code",
            "execution_count": None,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Phase2 Design Matrix Visualization\n",
                "print(\"=\" * 60)\n",
                "print(\"PHASE2 DESIGN MATRIX VISUALIZATION\")\n",
                "print(\"=\" * 60)\n",
                "\n",
                "# Sort trials by onset time to show chronological order\n",
                "df_phase2_sorted = df_phase2_conditions.sort_values('onset').reset_index(drop=True)\n",
                "print(f\"Trials sorted by onset time (chronological order)\")\n",
                "print(f\"First 10 trials: {df_phase2_sorted['trial_type'].head(10).tolist()}\")\n",
                "print(f\"Trial timing range: {df_phase2_sorted['onset'].min():.0f}s to {df_phase2_sorted['onset'].max():.0f}s\")\n",
                "print(f\"Total duration: {df_phase2_sorted['onset'].max() - df_phase2_sorted['onset'].min():.0f}s\")\n",
                "\n",
                "# Create visualization\n",
                "fig = plt.figure(figsize=(16, 10))\n",
                "gs = GridSpec(2, 2, height_ratios=[2, 1], width_ratios=[2, 1], \n",
                "              hspace=0.3, wspace=0.3)\n",
                "\n",
                "# Get unique conditions and create design matrix\n",
                "unique_conditions = sorted(df_phase2_sorted['conditions'].unique())\n",
                "n_conditions = len(unique_conditions)\n",
                "n_trials = len(df_phase2_sorted)\n",
                "\n",
                "# Create design matrix representation (chronological order)\n",
                "design_matrix = np.zeros((n_trials, n_conditions))\n",
                "for i, condition in enumerate(unique_conditions):\n",
                "    trial_indices = df_phase2_sorted[df_phase2_sorted['conditions'] == condition].index\n",
                "    design_matrix[trial_indices, i] = 1\n",
                "\n",
                "# Main design matrix plot\n",
                "ax_main = fig.add_subplot(gs[0, 0])\n",
                "im = ax_main.imshow(design_matrix.T, aspect='auto', cmap='Blues', interpolation='nearest')\n",
                "ax_main.set_xlabel('Trial Number (Chronological Order)')\n",
                "ax_main.set_ylabel('Condition')\n",
                "ax_main.set_title('Phase2 Design Matrix - Chronological Trial Order', fontsize=14, fontweight='bold')\n",
                "\n",
                "# Set x-axis labels to show actual trial numbers (1-based) in chronological order\n",
                "trial_numbers = range(1, n_trials + 1)\n",
                "ax_main.set_xticks(range(0, n_trials, max(1, n_trials // 10)))  # Show every nth trial\n",
                "ax_main.set_xticklabels([str(i) for i in trial_numbers[::max(1, n_trials // 10)]])\n",
                "\n",
                "# Set y-axis labels\n",
                "ax_main.set_yticks(range(n_conditions))\n",
                "ax_main.set_yticklabels(unique_conditions, fontsize=10)\n",
                "\n",
                "# Add colorbar\n",
                "cbar = plt.colorbar(im, ax=ax_main, shrink=0.8)\n",
                "cbar.set_label('Trial Present (1) / Absent (0)', fontsize=10)\n",
                "\n",
                "# Right panel - Contrast information\n",
                "ax_contrasts = fig.add_subplot(gs[0, 1])\n",
                "ax_contrasts.axis('off')\n",
                "\n",
                "# Show the interesting contrasts\n",
                "contrast_text = f\"{len(contrasts_phase2)} Interesting Contrasts:\\n\\n\"\n",
                "for i, contrast in enumerate(contrasts_phase2, 1):\n",
                "    contrast_text += f\"C{i}: {contrast[0]}\\n\"\n",
                "    if len(contrast) > 3:\n",
                "        contrast_text += f\"    {contrast[3]}\\n\\n\"\n",
                "    else:\n",
                "        contrast_text += \"\\n\"\n",
                "\n",
                "ax_contrasts.text(0.05, 0.95, contrast_text, transform=ax_contrasts.transAxes,\n",
                "                 fontsize=9, verticalalignment='top', fontfamily='monospace')\n",
                "ax_contrasts.set_title('Interesting Contrasts', fontsize=12, fontweight='bold')\n",
                "\n",
                "# Bottom panel - Condition details\n",
                "ax_details = fig.add_subplot(gs[1, :])\n",
                "ax_details.axis('off')\n",
                "\n",
                "# Create condition details table\n",
                "condition_counts = df_phase2_sorted['conditions'].value_counts()\n",
                "details_text = \"Phase2 Condition Details (Chronological Order):\\n\\n\"\n",
                "for condition in unique_conditions:\n",
                "    count = condition_counts[condition]\n",
                "    details_text += f\"• {condition:<25}: {count:2d} trials\\n\"\n",
                "details_text += f\"\\nNote: Trials are sorted by onset time, not grouped by condition\"\n",
                "\n",
                "ax_details.text(0.05, 0.95, details_text, transform=ax_details.transAxes,\n",
                "                fontsize=10, verticalalignment='top', fontfamily='monospace')\n",
                "\n",
                "plt.tight_layout()\n",
                "plt.show()\n",
                "\n",
                "print(f\"\\n✅ PHASE2 VISUALIZATION COMPLETE!\")\n",
                "print(f\"✅ Design matrix shows {n_conditions} conditions\")\n",
                "print(f\"✅ Generated {len(contrasts_phase2)} interesting contrasts\")\n",
                "print(f\"✅ Trial numbering: 1 to {n_trials} in chronological order (sorted by onset time)\")"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## Phase3 Design Matrix Visualization\n",
                "\n",
                "Visualize the design matrix for Phase3 data with chronological trial ordering."
            ]
        },
        {
            "cell_type": "code",
            "execution_count": None,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Phase3 Design Matrix Visualization\n",
                "print(\"=\" * 60)\n",
                "print(\"PHASE3 DESIGN MATRIX VISUALIZATION\")\n",
                "print(\"=\" * 60)\n",
                "\n",
                "# Sort trials by onset time to show chronological order\n",
                "df_phase3_sorted = df_phase3_conditions.sort_values('onset').reset_index(drop=True)\n",
                "print(f\"Trials sorted by onset time (chronological order)\")\n",
                "print(f\"First 10 trials: {df_phase3_sorted['trial_type'].head(10).tolist()}\")\n",
                "print(f\"Trial timing range: {df_phase3_sorted['onset'].min():.0f}s to {df_phase3_sorted['onset'].max():.0f}s\")\n",
                "print(f\"Total duration: {df_phase3_sorted['onset'].max() - df_phase3_sorted['onset'].min():.0f}s\")\n",
                "\n",
                "# Create visualization\n",
                "fig = plt.figure(figsize=(16, 10))\n",
                "gs = GridSpec(2, 2, height_ratios=[2, 1], width_ratios=[2, 1], \n",
                "              hspace=0.3, wspace=0.3)\n",
                "\n",
                "# Get unique conditions and create design matrix\n",
                "unique_conditions = sorted(df_phase3_sorted['conditions'].unique())\n",
                "n_conditions = len(unique_conditions)\n",
                "n_trials = len(df_phase3_sorted)\n",
                "\n",
                "# Create design matrix representation (chronological order)\n",
                "design_matrix = np.zeros((n_trials, n_conditions))\n",
                "for i, condition in enumerate(unique_conditions):\n",
                "    trial_indices = df_phase3_sorted[df_phase3_sorted['conditions'] == condition].index\n",
                "    design_matrix[trial_indices, i] = 1\n",
                "\n",
                "# Main design matrix plot\n",
                "ax_main = fig.add_subplot(gs[0, 0])\n",
                "im = ax_main.imshow(design_matrix.T, aspect='auto', cmap='Blues', interpolation='nearest')\n",
                "ax_main.set_xlabel('Trial Number (Chronological Order)')\n",
                "ax_main.set_ylabel('Condition')\n",
                "ax_main.set_title('Phase3 Design Matrix - Chronological Trial Order', fontsize=14, fontweight='bold')\n",
                "\n",
                "# Set x-axis labels to show actual trial numbers (1-based) in chronological order\n",
                "trial_numbers = range(1, n_trials + 1)\n",
                "ax_main.set_xticks(range(0, n_trials, max(1, n_trials // 10)))  # Show every nth trial\n",
                "ax_main.set_xticklabels([str(i) for i in trial_numbers[::max(1, n_trials // 10)]])\n",
                "\n",
                "# Set y-axis labels\n",
                "ax_main.set_yticks(range(n_conditions))\n",
                "ax_main.set_yticklabels(unique_conditions, fontsize=10)\n",
                "\n",
                "# Add colorbar\n",
                "cbar = plt.colorbar(im, ax=ax_main, shrink=0.8)\n",
                "cbar.set_label('Trial Present (1) / Absent (0)', fontsize=10)\n",
                "\n",
                "# Right panel - Contrast information\n",
                "ax_contrasts = fig.add_subplot(gs[0, 1])\n",
                "ax_contrasts.axis('off')\n",
                "\n",
                "# Show the interesting contrasts\n",
                "contrast_text = f\"{len(contrasts_phase3)} Interesting Contrasts:\\n\\n\"\n",
                "for i, contrast in enumerate(contrasts_phase3, 1):\n",
                "    contrast_text += f\"C{i}: {contrast[0]}\\n\"\n",
                "    if len(contrast) > 3:\n",
                "        contrast_text += f\"    {contrast[3]}\\n\\n\"\n",
                "    else:\n",
                "        contrast_text += \"\\n\"\n",
                "\n",
                "ax_contrasts.text(0.05, 0.95, contrast_text, transform=ax_contrasts.transAxes,\n",
                "                 fontsize=9, verticalalignment='top', fontfamily='monospace')\n",
                "ax_contrasts.set_title('Interesting Contrasts', fontsize=12, fontweight='bold')\n",
                "\n",
                "# Bottom panel - Condition details\n",
                "ax_details = fig.add_subplot(gs[1, :])\n",
                "ax_details.axis('off')\n",
                "\n",
                "# Create condition details table\n",
                "condition_counts = df_phase3_sorted['conditions'].value_counts()\n",
                "details_text = \"Phase3 Condition Details (Chronological Order):\\n\\n\"\n",
                "for condition in unique_conditions:\n",
                "    count = condition_counts[condition]\n",
                "    details_text += f\"• {condition:<25}: {count:2d} trials\\n\"\n",
                "details_text += f\"\\nNote: Trials are sorted by onset time, not grouped by condition\"\n",
                "\n",
                "ax_details.text(0.05, 0.95, details_text, transform=ax_details.transAxes,\n",
                "                fontsize=10, verticalalignment='top', fontfamily='monospace')\n",
                "\n",
                "plt.tight_layout()\n",
                "plt.show()\n",
                "\n",
                "print(f\"\\n✅ PHASE3 VISUALIZATION COMPLETE!\")\n",
                "print(f\"✅ Design matrix shows {n_conditions} conditions\")\n",
                "print(f\"✅ Generated {len(contrasts_phase3)} interesting contrasts\")\n",
                "print(f\"✅ Trial numbering: 1 to {n_trials} in chronological order (sorted by onset time)\")"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## Summary\n",
                "\n",
                "This notebook successfully tests the actual workflow functions from `first_level_workflows.py` with the half-events data:\n",
                "\n",
                "### Key Features:\n",
                "- **Uses actual workflow functions**: Imports and tests `extract_cs_conditions` and `create_contrasts` from `first_level_workflows.py`\n",
                "- **Handles half-events data**: Properly processes both phase2 and phase3 half-events CSV files\n",
                "- **Chronological visualization**: Design matrices show trials in chronological order (sorted by onset time)\n",
                "- **Proper trial numbering**: X-axis shows 1-based trial numbers in chronological order\n",
                "- **Clean and organized**: No duplicate code, clear structure, and focused on testing actual workflow functions\n",
                "\n",
                "### What the Visualizations Show:\n",
                "- **Design matrices** with trials ordered chronologically by onset time\n",
                "- **Condition grouping** showing first trials vs. others for each CS type\n",
                "- **Contrast information** displaying the generated interesting contrasts\n",
                "- **Trial timing** information showing the actual sequence and duration\n",
                "\n",
                "The notebook now properly tests the actual workflow code rather than using copied functions, ensuring that any changes to `first_level_workflows.py` will be reflected in the notebook's behavior."
            ]
        }
    ],
    "metadata": {
        "kernelspec": {
            "display_name": "Python 3",
            "language": "python",
            "name": "python3"
        },
        "language_info": {
            "codemirror_mode": {
                "name": "ipython",
                "version": 3
            },
            "file_extension": ".py",
            "mimetype": "text/x-python",
            "name": "python",
            "nbconvert_exporter": "python",
            "pygments_lexer": "ipython3",
            "version": "3.11.0"
        }
    },
    "nbformat": 4,
    "nbformat_minor": 4
}

# Write the notebook to file
with open('trial_tracking_analysis.ipynb', 'w') as f:
    json.dump(notebook, f, indent=1)

print("✅ Clean notebook created successfully!")
print("✅ Notebook is organized and clear with no duplicate content")
print("✅ Uses actual workflow functions from first_level_workflows.py")
print("✅ Includes chronological visualization with proper trial numbering")
